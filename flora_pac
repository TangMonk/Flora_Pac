#!/usr/bin/env python
# Flora_Pac by @leaskh
# www.leaskh.com, i@leaskh.com
# Based on chnroutes project (by Numb.Majority@gmail.com)

import re
import urllib2
import argparse
import math
import socket
import struct
import pickle
import os.path

def ip2long(ip):
    packedIP = socket.inet_aton(ip)
    return struct.unpack("!L", packedIP)[0]


def generate_pac(proxy):
    results  = fetch_ip_data()
    pacfile  = 'flora_pac.pac'
    rfile    = open(pacfile, 'w')
    results.insert(0, (ip2long('127.0.0.1'),   ip2long('255.0.0.0'),   0))
    results.insert(1, (ip2long('10.0.0.0'),    ip2long('255.0.0.0'),   0))
    results.insert(2, (ip2long('172.16.0.0'),  ip2long('255.240.0.0'), 0))
    results.insert(3, (ip2long('192.168.0.0'), ip2long('255.255.0.0'), 0))

    def ip(item):
        return item[0]

    results = sorted(results, key = ip)

    strLines = """// Flora_Pac by @leaskh
// www.leaskh.com, i@leaskh.com

function FindProxyForURL(url, host) {

    var list = ["""
    intLines = 0
    for ip,mask,_ in results:
        if intLines > 0:
            strLines = strLines + ','
        intLines = intLines + 1
        strLines = strLines + """
        [%d, %d]"""%(ip, mask)
    strLines += """
    ];

    var safeDomains = [
        '115.com',
        '123u.com',
        '126.com',
        '126.net',
        '163.com',
        '17173.com',
        '17cdn.com',
        '178.com',
        '21cn.com',
        '360buy.com',
        '360buyimg.com',
        '360doc.com',
        '360safe.com',
        '36kr.com',
        '400gb.com',
        '4399.com',
        '51.la',
        '51buy.com',
        '51cto.com',
        '51job.com',
        '51jobcdn.com',
        '5d6d.com',
        '5d6d.net',
        '61.com',
        '6rooms.com',
        '7k7k.com',
        '91.com',
        'acfun.tv',
        'ali213.net',
        'alibaba.com',
        'alicdn.com',
        'aliexpress.com',
        'aliimg.com',
        'alikunlun.com',
        'alimama.com',
        'alipay.com',
        'alipayobjects.com',
        'alisoft.com',
        'aliyun.com',
        'aliyuncdn.com',
        'aliyuncs.com',
        'anzhi.com',
        'appinn.com',
        'apple.com',
        'appsina.com',
        'archlinuxcn.org',
        'atpanel.com',
        'baidu.com',
        'baidupcs.com',
        'baihe.com',
        'baixing.com',
        'bdimg.com',
        'bdstatic.com',
        'bilibili.tv',
        'blogbus.com',
        'blueidea.com',
        'ccb.com',
        'cctv.com',
        'cctvpic.com',
        'cdn20.com',
        'china.com',
        'chinabyte.com',
        'chinacache.com',
        'chinacache.net',
        'chinamobile.com',
        'chinanews.com',
        'chinaren.com',
        'chinaunix.net',
        'chinaz.com',
        'cn',
        'cn.bing.com',
        'cn.debian.org',
        'cnbeta.com',
        'cnblogs.com',
        'cnepub.com',
        'cnzz.com',
        'comsenz.com',
        'csdn.net',
        'ct10000.com',
        'ctdisk.com',
        'dangdang.com',
        'dbank.com',
        'dedecms.com',
        'diandian.com',
        'dianping.com',
        'discuz.com',
        'discuz.net',
        'dl.google.com',
        'docin.com',
        'donews.com',
        'dospy.com',
        'douban.com',
        'douban.fm',
        'duapp.com',
        'duba.net',
        'duomi.com',
        'duote.com',
        'duowan.com',
        'egou.com',
        'et8.org',
        'etao.com',
        'fantong.com',
        'fenzhi.com',
        'ganji.com',
        'gaopeng.com',
        'gfan.com',
        'gtimg.com',
        'hao123.com',
        'hc360.com',
        'hdslb.com',
        'hiapk.com',
        'hichina.com',
        'hoopchina.com',
        'huanqiu.com',
        'hudong.com',
        'huochepiao.com',
        'hupu.com',
        'iask.com',
        'iciba.com',
        'idqqimg.com',
        'ifeng.com',
        'ifengimg.com',
        'ijinshan.com',
        'iqiyi.com',
        'it168.com',
        'iteye.com',
        'jandan.net',
        'jd.com',
        'jiathis.com',
        'jiayuan.com',
        'jiepang.com',
        'jing.fm',
        'jstv.com',
        'jumei.com',
        'kaixin001.com',
        'kandian.com',
        'kandian.net',
        'kanimg.com',
        'kdnet.net',
        'koudai8.com',
        'ku6cdn.com',
        'ku6.com',
        'ku6img.com',
        'kuaidi100.com',
        'kugou.com',
        'lashou.com',
        'letao.com',
        'letv.com',
        'lietou.com',
        'linezing.com',
        'loli.mg',
        'loli.vg',
        'lvping.com',
        'lxdns.com',
        'mangocity.com',
        'mapbar.com',
        'mediav.com',
        'meilishuo.com',
        'meituan.com',
        'meituan.net',
        'meizu.com',
        'microsoft.com',
        'mop.com',
        'mtime.com',
        'mydrivers.com',
        'mzstatic.com',
        'netease.com',
        'newsmth.net',
        'ngacn.cc',
        'nuomi.com',
        'okbuy.com',
        'optaim.com',
        'oschina.net',
        'paipai.com',
        'pcbeta.com',
        'pchome.net',
        'pcpop.com',
        'pengyou.com',
        'phpwind.net',
        'pingan.com',
        'pool.ntp.org',
        'pplive.com',
        'ppstream.com',
        'pptv.com',
        'qhimg.com',
        'qianlong.com',
        'qidian.com',
        'qingdaonews.com',
        'qiushibaike.com',
        'qiyi.com',
        'qiyipic.com',
        'qq.com',
        'qqmail.com',
        'qstatic.com',
        'qunar.com',
        'qunarzz.com',
        'qvbuy.com',
        'renren.com',
        'rrfmn.com',
        'rrimg.com',
        'sanguosha.com',
        'sdo.com',
        'sina.com',
        'sinaapp.com',
        'sinaedge.com',
        'sinaimg.com',
        'sinajs.com',
        'skycn.com',
        'smzdm.com',
        'sogou.com',
        'sohu.com',
        'soku.com',
        'soso.com',
        'soufun.com',
        'soufunimg.com',
        'suning.com',
        'staticsdo.com',
        'steamcn.com',
        'suning.com',
        'szzfgjj.com',
        'tanx.com',
        'taobaocdn.com',
        'taobao.com',
        'tbcache.com',
        'tdimg.com',
        'tencent.com',
        'tenpay.com',
        'tgbus.com',
        'thawte.com',
        'tiancity.com',
        'tianyaui.com',
        'tiexue.net',
        'tmall.com',
        'tmcdn.net',
        'tom.com',
        'tomonline-inc.com',
        'tuan800.com',
        'tuan800.net',
        'tuanimg.com',
        'tudou.com',
        'tudouui.com',
        'tuniu.com',
        'u148.net',
        'u17.com',
        'ubuntu.com',
        'ucjoy.com',
        'uni-marketers.com',
        'unionpay.com',
        'unionpaysecure.com',
        'uusee.com',
        'uuu9.com',
        'vancl.com',
        'vcimg.com',
        'verycd.com',
        'wandoujia.com',
        'wdjimg.com',
        'weibo.com',
        'weiphone.com',
        'weiyun.com',
        'west263.com',
        'wrating.com',
        'wumii.com',
        'xdcdn.net',
        'xiachufang.com',
        'xiami.com',
        'xiami.net',
        'xiaomi.com',
        'xiaonei.com',
        'xiazaiba.com',
        'xici.net',
        'xilu.com',
        'xinhuanet.com',
        'xinnet.com',
        'xlpan.com',
        'xn--fiqs8s',
        'xnpic.com',
        'xungou.com',
        'xunlei.com',
        'ydstatic.com',
        'yesky.com',
        'yeyou.com',
        'yihaodian.com',
        'yihaodianimg.com',
        'yingjiesheng.com',
        'yintai.com',
        'yinyuetai.com',
        'yiqifa.com',
        'yixun.com',
        'ykimg.com',
        'ynet.com',
        'youdao.com',
        'yougou.com',
        'youku.com',
        'yupoo.com',
        'yy.com',
        'yyets.com',
        'zbjimg.com',
        'zhaopin.com',
        'zhi.hu',
        'zhihu.com',
        'zhimg.com',
        'zhubajie.com',
        'zongheng.com'
    ];

    var safePorts = [
        5223,
        3478,
        3479,
        3480,
        3481,
        3482,
        3483,
        3484,
        3485,
        3486,
        3487,
        3488,
        3489,
        3490,
        3491,
        3492,
        3493,
        3494,
        3495,
        3496,
        3497,
        16384,
        16385,
        16386,
        16387,
        16393,
        16394,
        16395,
        16396,
        16397,
        16398,
        16399,
        16400,
        16401,
        16402
    ];

    

    function convertAddress(ipchars) {
        var bytes = ipchars.split('.');
        var result = ((bytes[0] & 0xff) << 24) |
                     ((bytes[1] & 0xff) << 16) |
                     ((bytes[2] & 0xff) <<  8) |
                      (bytes[3] & 0xff);
        return result;
    }

    function match(ip, list) {
        var left = 0, right = list.length;
        do {
            var mid = Math.floor((left + right) / 2),
                ip  = (ip & list[mid][1]) >>> 0,
                m   = (list[mid][0] & list[mid][1]) >>> 0;
            if (ip == m) {
                return true;
            } else if (ip > m) {
                left  = mid + 1;
            } else {
                right = mid;
            }
        } while (left + 1 <= right)
        return false;
    }
    
    var except_domain = [
        "*.youtube.*",
        "youtube-nocookie.com",
        "youtube.com",
        "youtubecn.com"
    ];

    if (except_domain.contains(host)){
        return '{proxy}';
    }

    if (isPlainHostName(host)
     || (host === '127.0.0.1')
     || (host === 'localhost')
     || (/\\b([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\\b/.test(host))) { // @todo @removing
        return 'DIRECT';
    }

    var strDomain = '.' + host;
    for (var i in safeDomains) {
        if (strDomain.indexOf('.' + safeDomains[i]) !== -1) {
            return 'DIRECT';
        }
    }

    var intPort = parseInt(host.split(':')[1]);
    if (intPort) {
        for (i in safePorts) {
            if (safePorts[i] === intPort) {
                return 'DIRECT';
            }
        }
    }

    var strIp = dnsResolve(host);
    if (!strIp) {
        return 'DIRECT';
    }

    var intIp = convertAddress(strIp);
    if (match(intIp, list)) {
        return 'DIRECT';
    }

    return '{proxy}';

}
""" % {"proxy": proxy}
    rfile.write(strLines)
    rfile.close()
    print ("Rules: %d items.\n"
           "Usage: Use the newly created %s as your web browser's automatic "
           "PAC(Proxy auto-config) file."%(intLines, pacfile))


def pac_server(port):
    if port <= 0:
        return
    import SimpleHTTPServer
    import SocketServer
    class DefaultHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/':
                self.path = '/flora_pac.pac'
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
    httpd = SocketServer.TCPServer(('0.0.0.0', port), DefaultHandler)
    print "PAC is now serving at: 0.0.0.0:%d"%(port)
    print "Check it out with: $ curl http://127.0.0.1:%d"%(port)
    httpd.serve_forever()


def fetch_ip_data():
    # Load ip file, if ip file exists
    ip_list_file_pat = "./ip_list"
    if os.path.exists(ip_list_file_pat):
        f = open(ip_list_file_pat, 'r')
        return pickle.load(f)

    #fetch data from apnic
    print "Fetching data from apnic.net, it might take a few minutes, please wait..."
    url=r'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest'
  # url=r'http://flora/delegated-apnic-latest' #debug
    data=urllib2.urlopen(url).read()

    cnregex=re.compile(r'apnic\|cn\|ipv4\|[0-9\.]+\|[0-9]+\|[0-9]+\|a.*',re.IGNORECASE)
    cndata=cnregex.findall(data)

    results=[]
    prev_net=''

    for item in cndata:
        unit_items=item.split('|')
        starting_ip=unit_items[3]
        num_ip=int(unit_items[4])

        imask=0xffffffff^(num_ip-1)
        #convert to string
        imask=hex(imask)[2:]
        mask=[0]*4
        mask[0]=imask[0:2]
        mask[1]=imask[2:4]
        mask[2]='0' #imask[4:6]
        mask[3]='0' #imask[6:8]

        #convert str to int
        mask=[ int(i,16 ) for i in mask]
        mask="%d.%d.%d.%d"%tuple(mask)

        #mask in *nix format
        mask2=32-int(math.log(num_ip,2))

        ip=starting_ip.split('.')
        ip[2] = '0'
        ip[3] = '0'
        starting_ip = '.'.join(ip)
        if starting_ip != prev_net:
            results.append((ip2long(starting_ip), ip2long(mask), mask2))
            prev_net = starting_ip

    f = open(ip_list_file_pat, 'w')
    pickle.dump(results, f)
    return results


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate proxy auto-config rules.")
    parser.add_argument('-x', '--proxy',
                        dest    = 'proxy',
                        default = 'SOCKS5 127.0.0.1:8964; SOCKS 127.0.0.1:8964; DIRECT',
                        nargs   = '?',
                        help    = "Proxy Server, examples: "
                                  "SOCKS5 127.0.0.1:8964; "
                                  "SOCKS 127.0.0.1:8964; "
                                  "PROXY 127.0.0.1:6489")
    parser.add_argument('-p', '--port',
                        dest    = 'port',
                        default = '0',
                        nargs   = '?',
                        help    = "Pac Server Port [OPTIONAL], examples: 8970")
    args = parser.parse_args()
    generate_pac(args.proxy)
    pac_server(int(args.port))

